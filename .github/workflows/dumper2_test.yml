name: Auto Firmware Dumper

on:
  workflow_dispatch:
    inputs:
      USER_NAME:
        description: 'GitHub Hesabındaki Adınız'
        required: true
        default: ''
      USER_EMAIL:
        description: 'GitHub Hesabındaki E-posta Adresiniz'
        required: true
        default: ''
      FIRMWARE_URL:
        description: 'Stock ROM Bağlantısı'
        required: true
        default: ''
      GENERATE_VENDOR:
        description: 'Vendor Tree Oluştur'
        required: true
        default: 'false'
        type: boolean
      UPLOAD_LINEAGE_DT:
        description: 'LineageOS Tree Yükle'
        required: true
        default: 'false'
        type: boolean
      UPLOAD_TWRP_DT:
        description: 'TWRP Tree Yükle'
        required: true
        default: 'false'
        type: boolean

jobs:
  dump:
    name: Auto Firmware Dumper
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GTOKEN }}
      TWT: ${{ github.event.inputs.UPLOAD_TWRP_DT }}
      LOT: ${{ github.event.inputs.UPLOAD_LINEAGE_DT }}
      GVT: ${{ github.event.inputs.GENERATE_VENDOR }}
      FUR: ${{ github.event.inputs.FIRMWARE_URL }}
      UN: ${{ github.event.inputs.USER_NAME }}
      UEM: ${{ github.event.inputs.USER_EMAIL }}
    permissions:
      contents: write
      
    steps:
      - name: Check Out
        uses: actions/checkout@v4

      - name: Cleanup
        uses: rokibhasansagar/slimhub_actions@main
        
      - name: Update Packages
        run: |
          sudo apt-get update -y
          sudo apt-get -y install cpio aria2 git python3 neofetch tar gzip
          
      - name: Setup Github CLI
        run: |
          sudo apt-get install gh -y
          
      - name: Clone and Setup DumprX
        run: |
          mkdir -p /home/runner/work/DumprX
          cd /home/runner/work/DumprX
          git clone https://github.com/DumprX/DumprX.git .
          sudo chmod 777 *.sh
          bash setup.sh
          pip3 install aospdtgen twrpdtgen
          
      - name: Creating Dump
        run: |
          cd /home/runner/work/DumprX
          sudo bash dumper.sh "${{ env.FUR }}"
          sudo chmod -R 777 out
          
      - name: Setting up Git
        run: |
          git config --global user.name "${{ env.UN }}"
          git config --global user.email "${{ env.UEM }}"
          
      - name: Uploading ROM Dump
        run: |
          cd /home/runner/work/DumprX/out
          sudo chmod -R 777 *
          
          if [ ! -d system ] && [ ! -d vendor ]; then
            echo "Failed: system or vendor directory not found!"
            exit 1
          fi
          
          # Move device trees to a temporary location for later use
          mv lineage-device-tree /home/runner/work/
          mv twrp-device-tree /home/runner/work/
          
          # Extract metadata (brand, codename, version)
          if [ -d vendor ]; then
            cd vendor
          elif [ -d system/system ]; then
            cd system/system
          else
            cd system
          fi
          
          codename=$(grep -E "ro\.(product|vendor|system)\.device=" build.prop | head -n 1 | cut -d'=' -f2)
          brand=$(grep -E "ro\.(product|vendor|system)\.brand=" build.prop | head -n 1 | cut -d'=' -f2)
          version=$(grep "ro.build.version.release_or_codename=" build.prop | cut -d'=' -f2)
          fingerprint=$(grep "ro.system.build.fingerprint=" build.prop | cut -d'=' -f2)
          
          codename=$(echo "$codename" | tr -d '[:space:]')
          brand=$(echo "$brand" | tr 'A-Z' 'a-z' | tr -d '[:space:]')
          
          echo "$codename" > /home/runner/work/codename.txt
          echo "$brand" > /home/runner/work/brand.txt
          echo "$version" > /home/runner/work/version.txt
          echo "$fingerprint" > /home/runner/work/fingerprint.txt
          
          cd /home/runner/work/DumprX/out
          sudo rm -rf .git
          
          # Compress large image files
          max_size=48000000
          images=("recovery.img" "boot.img" "vendor_boot.img" "init_boot.img" "dtbo.img" "dtb.img")
          for pf in "${images[@]}"; do
            if [ -f "$pf" ] && [[ $(stat -c %s "$pf") -gt $max_size ]]; then
              gzip -f "$pf"
            fi
          done
          
          find . -type f -size +50M -delete
          
          dat=$(date +%Y%m%d)
          description="Dump for $brand $codename"
          
          git init
          git branch -M dump-"$codename"-"$dat"
          git add .
          git commit -s -m "Dump for $brand $codename"
          gh repo create dump_"$brand"_"$codename" --public --description="$description" --source=. --remote=origin --push --debug

      - name: Create Vendor Tree
        if: env.GVT == 'true'
        run: |
          cd /home/runner/work
          codename=$(cat codename.txt)
          brand=$(cat brand.txt)

          if [ ! -d "lineage-device-tree" ]; then
            echo "LineageOS device tree not found. Cannot create vendor tree."
            exit 1
          fi

          mkdir -p vnd_project/android/device/"$brand"/"$codename"
          mkdir vnd_project/dump
          
          mv lineage-device-tree/* vnd_project/android/device/"$brand"/"$codename"
          mv DumprX/out/* vnd_project/dump/

          cd vnd_project
          git clone --depth=1 https://github.com/LineageOS/android_tools_extract-utils -b lineage-20.0 android/tools/extract-utils
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_extract-tools -b lineage-20.0 android/prebuilts/extract-tools

          sudo chmod 777 android/device/"$brand"/"$codename"/setup-makefiles.sh
          cd android/device/"$brand"/"$codename"
          sudo chmod 777 extract-files.sh
          bash extract-files.sh ../../../dump/

          echo "Vendor tree created successfully."
          
      - name: Uploading Vendor Tree
        if: env.GVT == 'true'
        run: |
          cd /home/runner/work
          codename=$(cat codename.txt)
          brand=$(cat brand.txt)
          
          cd vnd_project/android/vendor/"$brand"/"$codename"
          sudo chmod -R 777 *
          
          dat=$(date +%Y%m%d)
          git init
          git branch -M vendor-"$codename"-"$dat"
          git add .
          git commit -s -m "$codename : initial vendor tree"
          gh repo create android_vendor_"$brand"_"$codename" --public --description="Vendor tree for $codename" --source=. --remote=origin --push
          echo "Vendor tree uploaded successfully."
          
      - name: Uploading LineageOS Device Tree
        if: env.LOT == 'true'
        run: |
          cd /home/runner/work
          codename=$(cat codename.txt)
          brand=$(cat brand.txt)
          
          cd lineage-device-tree
          dat=$(date +%Y%m%d)
          git init
          git branch -M lineage-"$codename"-"$dat"
          git add .
          git commit -s -m "$codename : LineageOS compatible device tree"
          gh repo create lineage_device_"$brand"_"$codename" --public --description="LineageOS compatible tree for $codename " --source=. --remote=origin --push
          echo "LineageOS device tree uploaded successfully."
        continue-on-error: true

      - name: Uploading TWRP Device Tree
        if: env.TWT == 'true'
        run: |
          cd /home/runner/work
          codename=$(cat codename.txt)
          brand=$(cat brand.txt)
          version=$(cat version.txt)
          
          cd twrp-device-tree
          
          # Handle the directory structure created by twrpdtgen
          if [ -d "$brand/$codename" ]; then
            cd "$brand/$codename"
          fi
          
          dat=$(date +%Y%m%d)
          git init
          git branch -M twrp-"$version"-"$dat"
          git add .
          git commit -s -m "$codename : TWRP compatible device tree"
          gh repo create twrp_device_"$brand"_"$codename" --public --description="TWRP compatible tree for $codename " --source=. --remote=origin --push
          echo "TWRP device tree uploaded successfully."
        continue-on-error: true
        
      - name: Uploading Images as Artifacts
        uses: actions/upload-artifact@v4
        with: 
          name: Dumped_Images
          path: |
            /home/runner/work/DumprX/out/*.img
            /home/runner/work/DumprX/out/*.gz
          if-no-files-found: ignore
          
      - name: Cleanup workspace
        run: |
          rm -rf /home/runner/work/DumprX
          rm -rf /home/runner/work/vnd_project
